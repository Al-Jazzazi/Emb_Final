#ifndef INDICATORS_H
#define INDICATORS_H

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

#define F_CPU 16000000UL
#define NEOPIXEL_PORT PORTD
#define NEOPIXEL_DDR  DDRD
#define NEOPIXEL_PIN  PD6    // D6 on Arduino
#define SPEAKER_PIN   PB1    // OC1A for PWM (D9 on Uno)

// Set pixel color and transmit (single pixel only)
void sendNeoPixelColor(uint8_t r, uint8_t g, uint8_t b) {
    cli(); // Disable interrupts
    NEOPIXEL_PORT &= ~(1 << NEOPIXEL_PIN);

    uint8_t colors[3] = {g, r, b};  // WS2812 expects GRB
    for (uint8_t i = 0; i < 3; i++) {
        uint8_t val = colors[i];
        for (uint8_t bit = 0; bit < 8; bit++) {
            if (val & (1 << (7 - bit))) {
                // 1-bit: high 0.8us, low 0.45us
                NEOPIXEL_PORT |= (1 << NEOPIXEL_PIN);
                _delay_us(0.8);
                NEOPIXEL_PORT &= ~(1 << NEOPIXEL_PIN);
                _delay_us(0.45);
            } else {
                // 0-bit: high 0.4us, low 0.85us
                NEOPIXEL_PORT |= (1 << NEOPIXEL_PIN);
                _delay_us(0.4);
                NEOPIXEL_PORT &= ~(1 << NEOPIXEL_PIN);
                _delay_us(0.85);
            }
        }
    }

    sei(); // Re-enable interrupts
    _delay_us(50); // Reset latch
}

// Setup NeoPixel and Speaker pins
void setupIndicators() {
    NEOPIXEL_DDR |= (1 << NEOPIXEL_PIN); // Output
    DDRB |= (1 << SPEAKER_PIN);          // OC1A as output

    // Setup Timer1 for PWM at ~1kHz
    TCCR1A = (1 << COM1A0) | (1 << WGM11); // Toggle OC1A
    TCCR1B = (1 << WGM12) | (1 << CS11);   // CTC mode, prescaler 8
    OCR1A = 1000; // Initial frequency
}

// Generate a beep on OC1A pin (speaker)
void playBeep(uint16_t freq, uint16_t duration_ms) {
    uint16_t ocr_val = F_CPU / (2 * 8 * freq); // Based on prescaler 8
    OCR1A = ocr_val;
    TCCR1A |= (1 << COM1A0);  // Enable toggle

    for (uint16_t i = 0; i < duration_ms; i++) {
        _delay_ms(1);
    }

    TCCR1A &= ~(1 << COM1A0); // Stop toggle
}

// Main indicator logic
void showIndicators(float freq) {
    if (freq >= 3.0 && freq <= 5.0) {
        sendNeoPixelColor(255, 255, 0); // Yellow
        playBeep(1000, 100);            // 1 short beep
    } else if (freq > 5.0 && freq <= 7.0) {
        sendNeoPixelColor(255, 0, 0);   // Red
        playBeep(1500, 80);
        _delay_ms(100);
        playBeep(1500, 80);
    } else {
        sendNeoPixelColor(0, 255, 0);   // Green (normal)
    }
}

#endif
